interface Query {
    [key: string]: string | string[] | undefined;
}
export declare class ApiClientError extends Error {
    body: any;
    code?: string;
    field?: string;
    status: number;
    type?: string;
    title?: string;
    detail?: string;
    instance?: string;
    url: string;
    constructor(status: number, body: any, url: string);
}
interface HeadersProvider {
    (): Promise<{
        [key: string]: string | undefined;
    }>;
}
declare function headersNoop(): Promise<{}>;
export declare function bearerTokenHeaders(accessToken: string | null): typeof headersNoop;
export default class ApiClient {
    private baseUrl;
    private getHeaders;
    constructor(baseUrl: string, getHeaders?: HeadersProvider);
    withAccessToken(value: string | null): ApiClient;
    withBasicAuth(username: string, password: string): ApiClient;
    invalidate(): Promise<null>;
    request(method: string, path: string, query: Query | undefined, body?: any): Promise<any>;
    get(path: string, query?: Query): Promise<any>;
    post(path: string, body: any, query?: Query): Promise<any>;
    put(path: string, body: any, query?: Query): Promise<any>;
    patch(path: string, body: any, query?: Query): Promise<any>;
    delete(path: string, body?: any, query?: Query): Promise<any>;
}
export {};
